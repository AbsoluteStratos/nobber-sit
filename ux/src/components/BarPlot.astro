---
---

<div class="chart-container">
  <div class="controls">
    <label>
      Emote:
      <select id="emote-select"></select>
    </label>

    <label>
      Range:
      <select id="range-select">
        <option value="30">Past 30 days</option>
        <option value="60">Past 60 days</option>
        <option value="all">All days</option>
      </select>
    </label>
  </div>

  <div id="chart"></div>

  <div id="top-users" class="top-users"></div>
</div>

<style>
  .chart-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
  }

  .controls {
    margin-bottom: 16px;
    display: flex;
    gap: 20px;
    font-family: sans-serif;
  }

  select {
    padding: 4px 8px;
    border: 3px solid salmon;
    color: salmon;
    border-radius: 8px;
  }

  #chart {
    width: 100%;
    max-width: 900px;
    height: 500px;
  }

  .top-users {
    margin-top: 20px;
    font-family: 'Comic Sans MS', cursive, sans-serif;
    text-align: left;
    width: 100%;
    max-width: 900px;
    background: #fff5f5;
    border: 3px solid salmon;
    color: salmon;
    border-radius: 8px;
    padding: 10px;
  }
  .top-users h3 {
    margin: 0 0 10px 0;
    color: salmon;
  }
  .top-users ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  .top-users li {
    margin: 4px 0;
  }
</style>

<!-- Load Plotly from CDN -->
<script src="https://cdn.plot.ly/plotly-2.27.0.min.js" defer></script>

<script client:load>
  async function initChart() {
    const res = await fetch("/daily_emote_totals.json");
    const rawTotals = await res.json();

    const res2 = await fetch("/user_emote_totals.json");
    const rawUsers = await res2.json();

    // Extract dates & emote keys
    // const dates = raw.dates;
    const emotes = Object.keys(rawTotals);

    // Populate emote dropdown
    const emoteSelect = document.getElementById("emote-select");
    emotes.forEach(e => {
      const opt = document.createElement("option");
      opt.value = e;
      opt.textContent = e;
      emoteSelect.appendChild(opt);
    });

    // Function to filter by range
    function filterRange(emote_data, range) {
      const dates = Object.keys(emote_data);
      const values =  Object.values(emote_data);
      if (range === "all") return { dates, values};
      const cutoff = new Date(dates[dates.length - 1]);
      cutoff.setDate(cutoff.getDate() - parseInt(range));
      const filtered = dates
        .map((d, i) => ({ date: new Date(d), value: values[i] }))
        .filter(d => d.date >= cutoff);
      return {
        dates: filtered.map(d => d.date.toISOString().slice(0, 10)),
        values: filtered.map(d => d.value)
      };
    }

    // Initial plot
    let currentEmote = "ohhnosSit";
    let currentRange = "30";
    document.getElementById("range-select").value = currentRange;
    emoteSelect.value = currentEmote;

    function updateTopUsers() {
      const container = document.getElementById("top-users");
      const userData = rawUsers[currentEmote] || {};
      const sorted = Object.entries(userData)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5);

      container.innerHTML = `
        <h3>Top 5 users for ${currentEmote}</h3>
        <ul>
          ${sorted.map(([user, count]) => `<li>${user}: ${count}</li>`).join("")}
        </ul>
      `;
    }

    function updateChart() {
      const values = rawTotals[currentEmote];
      const { dates: x, values: y } = filterRange(values, currentRange);

      const trace = {
        x,
        y,
        type: "bar",
        marker: { color: "salmon" }
      };

      const layout = {
        title: `${currentEmote} usage`,
        xaxis: { title: "Stream Date (EST)"},
        yaxis: { title: "Count" },
        margin: { t: 50, b: 80 },
        transition: { duration: 500, easing: "cubic-in-out" }
      };

      Plotly.react("chart", [trace], layout, { responsive: true });
    }

    // Event listeners
    emoteSelect.addEventListener("change", (e) => {
      currentEmote = e.target.value;
      updateChart();
      updateTopUsers();
    });

    document.getElementById("range-select").addEventListener("change", (e) => {
      currentRange = e.target.value;
      updateChart();
    });

    // Draw first chart
    updateChart();
    updateTopUsers();
  }

  initChart();
</script>
